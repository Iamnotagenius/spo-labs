/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : lang.g
 *     -                            On : 2023-10-24 16:34:08
 *     -                 for the lexer : langLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
langLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef plangLexer, which is returned from a call to langLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in plangLexer are  as follows:
 *
 *  - 
 void
      plangLexer->T__48(plangLexer)
 *  - 
 void
      plangLexer->T__49(plangLexer)
 *  - 
 void
      plangLexer->Dim(plangLexer)
 *  - 
 void
      plangLexer->If(plangLexer)
 *  - 
 void
      plangLexer->Then(plangLexer)
 *  - 
 void
      plangLexer->Else(plangLexer)
 *  - 
 void
      plangLexer->Do(plangLexer)
 *  - 
 void
      plangLexer->While(plangLexer)
 *  - 
 void
      plangLexer->Wend(plangLexer)
 *  - 
 void
      plangLexer->Break(plangLexer)
 *  - 
 void
      plangLexer->Loop(plangLexer)
 *  - 
 void
      plangLexer->Until(plangLexer)
 *  - 
 void
      plangLexer->End(plangLexer)
 *  - 
 void
      plangLexer->UnOp(plangLexer)
 *  - 
 void
      plangLexer->And(plangLexer)
 *  - 
 void
      plangLexer->Or(plangLexer)
 *  - 
 void
      plangLexer->BitOp(plangLexer)
 *  - 
 void
      plangLexer->CompOp(plangLexer)
 *  - 
 void
      plangLexer->MultOp(plangLexer)
 *  - 
 void
      plangLexer->AddOp(plangLexer)
 *  - 
 void
      plangLexer->String(plangLexer)
 *  - 
 void
      plangLexer->CharLiteral(plangLexer)
 *  - 
 void
      plangLexer->HexLiteral(plangLexer)
 *  - 
 void
      plangLexer->BitsLiteral(plangLexer)
 *  - 
 void
      plangLexer->Integer(plangLexer)
 *  - 
 void
      plangLexer->Bool(plangLexer)
 *  - 
 void
      plangLexer->BuiltinType(plangLexer)
 *  - 
 void
      plangLexer->Identifier(plangLexer)
 *  - 
 void
      plangLexer->LParen(plangLexer)
 *  - 
 void
      plangLexer->RParen(plangLexer)
 *  - 
 void
      plangLexer->Comma(plangLexer)
 *  - 
 void
      plangLexer->Semi(plangLexer)
 *  - 
 void
      plangLexer->Char(plangLexer)
 *  - 
 void
      plangLexer->EscapeSequence(plangLexer)
 *  - 
 void
      plangLexer->UnicodeEscape(plangLexer)
 *  - 
 void
      plangLexer->HexDigit(plangLexer)
 *  - 
 void
      plangLexer->Digit(plangLexer)
 *  - 
 void
      plangLexer->Bit(plangLexer)
 *  - 
 void
      plangLexer->WS(plangLexer)
 *  - 
 void
      plangLexer->Tokens(plangLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_langLexer_H
#define _langLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct langLexer_Ctx_struct langLexer, * plangLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
langLexer

 */
struct langLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__48)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mT__49)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mDim)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mIf)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mThen)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mElse)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mDo)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mWhile)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mWend)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mBreak)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mLoop)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mUntil)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mEnd)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mUnOp)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mAnd)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mOr)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mBitOp)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mCompOp)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mMultOp)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mAddOp)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mString)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mCharLiteral)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mHexLiteral)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mBitsLiteral)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mInteger)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mBool)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mBuiltinType)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mIdentifier)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mLParen)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mRParen)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mComma)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mSemi)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mChar)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mEscapeSequence)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mUnicodeEscape)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mHexDigit)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mDigit)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mBit)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct langLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct langLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct langLexer_Ctx_struct * ctx);
    void	    (*free)   (struct langLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API plangLexer langLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API plangLexer langLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__48      48
#define T__49      49
#define AddOp      4
#define And      5
#define Arg      6
#define Array      7
#define Bit      8
#define BitOp      9
#define BitsLiteral      10
#define Body      11
#define Bool      12
#define Break      13
#define BuiltinType      14
#define Char      15
#define CharLiteral      16
#define Comma      17
#define CompOp      18
#define Digit      19
#define Dim      20
#define Do      21
#define Else      22
#define End      23
#define EscapeSequence      24
#define Expr      25
#define HexDigit      26
#define HexLiteral      27
#define Identifier      28
#define If      29
#define Integer      30
#define LParen      31
#define Loop      32
#define MultOp      33
#define Or      34
#define RParen      35
#define ReturnType      36
#define Root      37
#define Semi      38
#define Signature      39
#define String      40
#define Then      41
#define UnOp      42
#define UnicodeEscape      43
#define Until      44
#define WS      45
#define Wend      46
#define While      47
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for langLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
