/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : lang.g
 *     -                            On : 2023-10-31 12:30:26
 *     -                for the parser : langParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
langParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef plangParser, which is returned from a call to langParserNew().
 *
 * The methods in plangParser are  as follows:
 *
 *  - 
 langParser_source_return
      plangParser->source(plangParser)
 *  - 
 langParser_typeSpec_return
      plangParser->typeSpec(plangParser)
 *  - 
 langParser_typeRef_return
      plangParser->typeRef(plangParser)
 *  - 
 langParser_arraySpec_return
      plangParser->arraySpec(plangParser)
 *  - 
 langParser_funcSignature_return
      plangParser->funcSignature(plangParser)
 *  - 
 langParser_argDef_return
      plangParser->argDef(plangParser)
 *  - 
 langParser_sourceItem_return
      plangParser->sourceItem(plangParser)
 *  - 
 langParser_statement_return
      plangParser->statement(plangParser)
 *  - 
 langParser_thenClause_return
      plangParser->thenClause(plangParser)
 *  - 
 langParser_elseClause_return
      plangParser->elseClause(plangParser)
 *  - 
 langParser_loopTerm_return
      plangParser->loopTerm(plangParser)
 *  - 
 langParser_expr_return
      plangParser->expr(plangParser)
 *  - 
 langParser_unOp_return
      plangParser->unOp(plangParser)
 *  - 
 langParser_addOp_return
      plangParser->addOp(plangParser)
 *  - 
 langParser_bitOp_return
      plangParser->bitOp(plangParser)
 *  - 
 langParser_orExpr_return
      plangParser->orExpr(plangParser)
 *  - 
 langParser_andExpr_return
      plangParser->andExpr(plangParser)
 *  - 
 langParser_compExpr_return
      plangParser->compExpr(plangParser)
 *  - 
 langParser_addExpr_return
      plangParser->addExpr(plangParser)
 *  - 
 langParser_multExpr_return
      plangParser->multExpr(plangParser)
 *  - 
 langParser_bitExpr_return
      plangParser->bitExpr(plangParser)
 *  - 
 langParser_unExpr_return
      plangParser->unExpr(plangParser)
 *  - 
 langParser_call_return
      plangParser->call(plangParser)
 *  - 
 langParser_atom_return
      plangParser->atom(plangParser)
 *  - 
 langParser_builtin_return
      plangParser->builtin(plangParser)
 *  - 
 langParser_literal_return
      plangParser->literal(plangParser)
 *  - 
 langParser_identifier_return
      plangParser->identifier(plangParser)
 *  - 
 langParser_str_return
      plangParser->str(plangParser)
 *  - 
 langParser_character_return
      plangParser->character(plangParser)
 *  - 
 langParser_hex_return
      plangParser->hex(plangParser)
 *  - 
 langParser_bits_return
      plangParser->bits(plangParser)
 *  - 
 langParser_dec_return
      plangParser->dec(plangParser)
 *  - 
 langParser_boolean_return
      plangParser->boolean(plangParser)
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_langParser_H
#define _langParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct langParser_Ctx_struct langParser, * plangParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct langParser_source_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_source_return;



typedef struct langParser_typeSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_typeSpec_return;



typedef struct langParser_typeRef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_typeRef_return;



typedef struct langParser_arraySpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_arraySpec_return;



typedef struct langParser_funcSignature_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_funcSignature_return;



typedef struct langParser_argDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_argDef_return;



typedef struct langParser_sourceItem_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_sourceItem_return;



typedef struct langParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_statement_return;



typedef struct langParser_thenClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_thenClause_return;



typedef struct langParser_elseClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_elseClause_return;



typedef struct langParser_loopTerm_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_loopTerm_return;



typedef struct langParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_expr_return;



typedef struct langParser_unOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_unOp_return;



typedef struct langParser_addOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_addOp_return;



typedef struct langParser_bitOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_bitOp_return;



typedef struct langParser_orExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_orExpr_return;



typedef struct langParser_andExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_andExpr_return;



typedef struct langParser_compExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_compExpr_return;



typedef struct langParser_addExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_addExpr_return;



typedef struct langParser_multExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_multExpr_return;



typedef struct langParser_bitExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_bitExpr_return;



typedef struct langParser_unExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_unExpr_return;



typedef struct langParser_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_call_return;



typedef struct langParser_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_atom_return;



typedef struct langParser_builtin_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_builtin_return;



typedef struct langParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_literal_return;



typedef struct langParser_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_identifier_return;



typedef struct langParser_str_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_str_return;



typedef struct langParser_character_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_character_return;



typedef struct langParser_hex_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_hex_return;



typedef struct langParser_bits_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_bits_return;



typedef struct langParser_dec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_dec_return;



typedef struct langParser_boolean_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    langParser_boolean_return;




/** Context tracking structure for 
langParser

 */
struct langParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     langParser_source_return
     (*source)	(struct langParser_Ctx_struct * ctx);

     langParser_typeSpec_return
     (*typeSpec)	(struct langParser_Ctx_struct * ctx);

     langParser_typeRef_return
     (*typeRef)	(struct langParser_Ctx_struct * ctx);

     langParser_arraySpec_return
     (*arraySpec)	(struct langParser_Ctx_struct * ctx);

     langParser_funcSignature_return
     (*funcSignature)	(struct langParser_Ctx_struct * ctx);

     langParser_argDef_return
     (*argDef)	(struct langParser_Ctx_struct * ctx);

     langParser_sourceItem_return
     (*sourceItem)	(struct langParser_Ctx_struct * ctx);

     langParser_statement_return
     (*statement)	(struct langParser_Ctx_struct * ctx);

     langParser_thenClause_return
     (*thenClause)	(struct langParser_Ctx_struct * ctx);

     langParser_elseClause_return
     (*elseClause)	(struct langParser_Ctx_struct * ctx);

     langParser_loopTerm_return
     (*loopTerm)	(struct langParser_Ctx_struct * ctx);

     langParser_expr_return
     (*expr)	(struct langParser_Ctx_struct * ctx);

     langParser_unOp_return
     (*unOp)	(struct langParser_Ctx_struct * ctx);

     langParser_addOp_return
     (*addOp)	(struct langParser_Ctx_struct * ctx);

     langParser_bitOp_return
     (*bitOp)	(struct langParser_Ctx_struct * ctx);

     langParser_orExpr_return
     (*orExpr)	(struct langParser_Ctx_struct * ctx);

     langParser_andExpr_return
     (*andExpr)	(struct langParser_Ctx_struct * ctx);

     langParser_compExpr_return
     (*compExpr)	(struct langParser_Ctx_struct * ctx);

     langParser_addExpr_return
     (*addExpr)	(struct langParser_Ctx_struct * ctx);

     langParser_multExpr_return
     (*multExpr)	(struct langParser_Ctx_struct * ctx);

     langParser_bitExpr_return
     (*bitExpr)	(struct langParser_Ctx_struct * ctx);

     langParser_unExpr_return
     (*unExpr)	(struct langParser_Ctx_struct * ctx);

     langParser_call_return
     (*call)	(struct langParser_Ctx_struct * ctx);

     langParser_atom_return
     (*atom)	(struct langParser_Ctx_struct * ctx);

     langParser_builtin_return
     (*builtin)	(struct langParser_Ctx_struct * ctx);

     langParser_literal_return
     (*literal)	(struct langParser_Ctx_struct * ctx);

     langParser_identifier_return
     (*identifier)	(struct langParser_Ctx_struct * ctx);

     langParser_str_return
     (*str)	(struct langParser_Ctx_struct * ctx);

     langParser_character_return
     (*character)	(struct langParser_Ctx_struct * ctx);

     langParser_hex_return
     (*hex)	(struct langParser_Ctx_struct * ctx);

     langParser_bits_return
     (*bits)	(struct langParser_Ctx_struct * ctx);

     langParser_dec_return
     (*dec)	(struct langParser_Ctx_struct * ctx);

     langParser_boolean_return
     (*boolean)	(struct langParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred31_lang)	(struct langParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred33_lang)	(struct langParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred37_lang)	(struct langParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct langParser_Ctx_struct * ctx);
    void	    (*free)   (struct langParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API plangParser langParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API plangParser langParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__52      52
#define T__53      53
#define And      4
#define Arg      5
#define Array      6
#define Assignment      7
#define Bit      8
#define BitOp      9
#define BitsLiteral      10
#define Body      11
#define Bool      12
#define Break      13
#define BuiltinType      14
#define Call      15
#define Char      16
#define CharLiteral      17
#define Comma      18
#define CompOp      19
#define Digit      20
#define Dim      21
#define Do      22
#define Else      23
#define End      24
#define EscapeSequence      25
#define Expr      26
#define HexDigit      27
#define HexLiteral      28
#define Identifier      29
#define If      30
#define Integer      31
#define LParen      32
#define Loop      33
#define Minus      34
#define MultOp      35
#define Not      36
#define Or      37
#define Plus      38
#define RParen      39
#define ReturnType      40
#define Root      41
#define Semi      42
#define Signature      43
#define String      44
#define Then      45
#define Tilde      46
#define UnicodeEscape      47
#define Until      48
#define WS      49
#define Wend      50
#define While      51
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for langParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
